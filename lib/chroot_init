#!/bin/bash
#
# This is the setup for the chroot enviroment
#

echo "Setting up chroot enviroment"
pushd {$BUILD_DIR} &> /dev/null

# Flag we need to clean this up
CHROOT_CLEANUP=1

# Copy the cross architecture binaray if needed
if [[ ! -z ${CROSS_ARCH} ]]; then
	echo "Copying cross arhcitecture binary ${CROSS_ARCH}"
	run_command "sudo cp ${CROSS_ARCH} ${CHROOT_DIR}/${CROSS_ARCH}"
fi

# Copy the imports directory if needed
if [ -d "${PROJECT_DIR}/${IMPORTS_DIR}" ]; then
    echo "Copying Imports directory to ${CHROOT_DIR}/${IMPORTS_DIR}"
    run_command "sudo cp -r ${PROJECT_DIR}/${IMPORTS_DIR} ${CHROOT_DIR}/."
fi


# DNS Support
run_command "sudo cp -f /etc/resolv.conf ${CHROOT_DIR}/etc/resolv.conf"

# APT Support
run_chroot_command ${CHROOT_DIR} "echo \"deb http://http.us.debian.org/debian wheezy main contrib non-free\" >/etc/apt/sources.list"
run_chroot_command ${CHROOT_DIR} "echo \"deb http://security.debian.org wheezy/updates main\" >>/etc/apt/sources.list"

# Mounts
run_command "sudo mount --bind /dev/ ${CHROOT_DIR}/dev"
run_chroot_command ${CHROOT_DIR} "mount -t proc none /proc"
run_chroot_command ${CHROOT_DIR} "mount -t sysfs none /sys"
run_chroot_command ${CHROOT_DIR} "mount -t devpts none /dev/pts"

# Redirects
run_chroot_command ${CHROOT_DIR} "dpkg-divert --local --rename --add /sbin/initctl"
run_chroot_command ${CHROOT_DIR} "ln -s /bin/true /sbin/initctl"

# Stop services from restarting on update or install
run_chroot_command ${CHROOT_DIR} "echo '#!/bin/bash' > /usr/sbin/policy-rc.d"
run_chroot_command ${CHROOT_DIR} "echo 'exit 101' >> /usr/sbin/policy-rc.d"
run_chroot_command ${CHROOT_DIR} "chmod +x /usr/sbin/policy-rc.d"

# Apt Updates
run_chroot_command ${CHROOT_DIR} "apt-get update -y"

popd &> /dev/null
